############  CALCULATE TRANSLATION & ROTATION COMPONENTS OF EACH SOLUTION ############# 

# These directions are given for a 7 monomer case. For different number of molecules, the monomer/segid list should be updated accordingly.

# 1. Calculate the anisotropy of each monomer through running the csh script:

./calculate_shape.csh

This script uses shape.py and geometry.py and outputs the file, shape.data.
The monomer, which has the highest anisotropy (the last column of the shape.data) should be chosen as the "reference" molecule.

# 2. Each monomer of the complex should be moved to the origin and aligned along its principal axes system through cns.
# In order to run this within the folder of it1, complex.psf & protein?.pdb files should be copied from the begin directory to the it1 directory.

./move_align.cns

# 3. Fit all the solutions on top of the most anisotropic "reference" molecule.

./fit-on-ref_prot.csh 

# The fitted solutions will be saved as *.fit

# Make a new directory called vector_orient and move all the fitted structures to this directory

mkdir vector_orient
mv *fit vector_orient
cd vector_orient  

# move also the aligned pdb's (obtained at the end of 2nd step), complex.psf and cns_rot_trans.csh (from scripts) to vector_orient

# 4. run the following one at a time for each monomer, except for the reference (most anisotropic) monomer:

cp ../file.nam .
sed -i 's/pdb/fit/g' file.nam

# DO NOT forget to change segid and reference aligned pdb file before running the following cns script:

./cns_rot_trans.csh

# This script calculates the rotation and translation component of each monomer per given solution, when the "reference" monomer is used as an anchor point.
# It outputs a file, trans_rot.dat_*, which contains the translation and rotation components of a particular monomer for every solution.

# 5. When the rotation and translation components of each monomer (except the reference one") for every solution is obtained, the trans_rot.dat_* files should be merged into one file:

paste trans_rot.dat_protein2 trans_rot.dat_protein3 trans_rot.dat_protein4 trans_rot.dat_protein5 trans_rot.dat_protein6 trans_rot.dat_protein7 > trans_rot_all.dat

# trans_rot_all.dat will contain all the translation and rotation components per model, listed according to file.nam

############  CALCULATE EXPERIMENTAL SHAPE FITNESS OF EACH SOLUTION ############# 

# 6. One needs to calculate the shape-fit-values of the models with respect to the experimental shape data.
# But before this, chain id's should be added to the it1 models via:

./add_chID.csh

# for SAXS, model-fit-to-data can be calculated with CRYSOL, for SANS with CRYSON
# The CRYSOL/N, the usage of these programs are given at http://www.embl-hamburg.de/biosaxs/crysol.html && http://www.embl-hamburg.de/biosaxs/cryson.html
# for EM, model-fit-to-data can be calculated with Chimera. The usage is explained at https://www.cgl.ucsf.edu/chimera/current/docs/UsersGuide/midas/fitmap.html
# An example strategy to calculate model-fit-to-data is given at https://www.wenmr.eu/wenmr/haddock-saxs-scoring

# When the model-fit-to-data are at hand, they should be ranked according to the order given in file.nam.

############  CLUSTERTING ############# 

# 7. For k-means clustering, the following should be run in matlab:

load trans_rot_all.dat % file containing the rotation and translation components per solution
load fitness.dat % file containing chi or ccor values ranked according to file.nam
dist_n = squareform(pdist(trans_rot_all)./7);
z = linkage(pdist(trans_rot_all)./7,'ward');

% input the rank of the solution with the best fitness
rank_s = 5; %example value

% explore a range of k's, i.e. the number of clusters
for j=2:20
	maxc= j;
	t = cluster(z, 'maxclust',maxc);
	for i=1:maxc
		w = t==i;
		m(i,:) = [mean(nonzeros(log(fitness).*w)) mean(nonzeros(dist_n(:,rank_s).*w))];
	end
	figure
	scatter(dist_n(:,rank_s),log(fitness),10,t,'LineWidth',11); hold on
	plot(m(:,2),m(:,1),'wo')
end

# pick the minimum k providing the most clear cluster separation
# record the log(fitness) treshold "th", which will define the best fitting ensemble
# replace "th" in the following awk one-liner with its corresponding value to find the list of the structures with log(fitness)<th

awk '{print $1,log($2)}' fitness.dat | awk '$2<th' | awk '{print $1}' > viol.sele

# 8. new it1 energy files should be generated by the following script, which uses viol.sele file as an input.

./generate_new_it1_files.csh

# 9. Number of water refinement structures (waterrefine value in run.cns) should be set to the number of lines 
# of the newly generated file.nam and HADDOCK-M3 should be run for a final time to water refine the selected set.

 
