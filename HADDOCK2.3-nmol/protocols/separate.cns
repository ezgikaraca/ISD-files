! Distribute molecules in 3D space
! Orient each molecule according to its principal axes
! and restore them all at the end (after the while loop)

Module(Data;Toppar;)

  evaluate ($ncount = 0)
  while ($ncount < $data.ncomponents) loop orientmol
    evaluate ($ncount = $ncount +1)
    eval($watersegname_$ncount="WAT" + encode($ncount))
    coor orient sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount) end
    do (xcomp = x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    do (ycomp = y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    do (zcomp = z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
  end loop orientmol

  do (x = xcomp) (not (resn ANI or resn XAN or resn DAN))
  do (y = ycomp) (not (resn ANI or resn XAN or resn DAN))
  do (z = zcomp) (not (resn ANI or resn XAN or resn DAN))

  ! Find the largest axis of all molecules
  evaluate ($minispacing = 25.0)
  evaluate ($mxdim = 0)
  evaluate ($ncount = 0)

  while ($ncount < $data.ncomponents) loop findmax
    evaluate ($ncount = $ncount +1)

    show max (x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($xdim = $result)
    show min (x) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($xdim = $xdim - $result)

    show max (y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($ydim = $result)
    show min (y) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($ydim = $ydim - $result)

    show max (z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($zdim = $result)
    show min (z) (segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
    evaluate ($zdim = $zdim - $result)

    ! Check which dimension (x,y,z) is the largest = mxdim
    evaluate ($mxdim = max($mxdim, $xdim, $ydim, $zdim))

  end loop findmax

  evaluate ($spacing = $minispacing + $mxdim )
  DISPLAY SPACING SET TO $spacing ANGSTROM

  ! This has to be manually coded because of the variable name
  ! Should be fine since we support only a few types of symmetry
  ! Maybe change the variable name later if these are expanded
  ! to have the number at the end?
  evaluate ($homosymmetry = false)

  if ($data.flags.sym eq true) then
    if ($data.numc2sym > 0) then
        if ($data.ncomponents = 2) then
      evaluate ($homosymmetry = true)
        end if
    end if
    if ($data.numc2sym = 6) then
        if ($data.ncomponents = 4) then
      evaluate ($homosymmetry = true)
        end if
    end if
    if ($data.numc3sym > 0) then
      if ($data.ncomponents = 3) then
        evaluate ($homosymmetry = true)
      end if
    end if
    if ($data.numc4sym > 0) then
      if ($data.ncomponents = 4) then
        evaluate ($homosymmetry = true)
      end if
    end if
    if ($data.numc5sym > 0) then
      if ($data.ncomponents = 5) then
        evaluate ($homosymmetry = true)
      end if
    end if
  end if

  if ($homosymmetry eq true) then
    ! In case of homosymmetry, place molecules in a plane
    evaluate ($ncount = 2)
    evaluate ($increment = 360/$data.ncomponents)

    {* translate and generate symmetric positions by rotation around z *}
    coor trans sele=(all) vector=($spacing,0,0) end

    while ($ncount le $data.ncomponents) loop orientsym

      {* rotate around z axis *}
      evaluate ($xr = $increment)
      evaluate ($x1 = cos($xr))
      evaluate ($x2 = -sin($xr))
      evaluate ($x3 = 0 )
      evaluate ($y1 = sin($xr))
      evaluate ($y2 = cos($xr))
      evaluate ($y3 = 0 )
      evaluate ($z1 = 0 )
      evaluate ($z2 = 0 )
      evaluate ($z3 = 1 )
      coor
        center=(0 0 0)
        rotate matrix=($x1 $x2 $x3) ($y1 $y2 $y3) ($z1 $z2 $z3)
        sele=(segid $Toppar.prot_segid_$ncount or segid $watersegname_$ncount)
      end
      evaluate ($increment = $xr + 360/$data.ncomponents)

    evaluate ($ncount = $ncount + 1)

    end loop orientsym
  else
    ! Do we need fix any molecule?
    evaluate($n_moving_mol = 0)
    evaluate ($ncount = 0)
    while ($ncount < $data.ncomponents) loop centermol
      if ($Toppar.fix_origin_$ncount eq false) then
        evaluate($n_moving_mol = $n_moving_mol + 1)
      end if
      evaluate ($ncount = $ncount + 1)
    end loop centermol
    display N_MOVING_MOL IS $n_moving_mol

    ! Translate molecules to positions calculated using an algorithm
    ! based on minimization of electrostatic potential of N equally charged particles.
    ! See Thomson problem: http://en.wikipedia.org/wiki/Thomson_problem
    evaluate ($filename = "RUN:toppar/initial_positions/trans_vector_" + encode($n_moving_mol) )
    inline @@$filename

    ! Generate as many random numbers as the # of mols
    evaluate ($ncount = 0)
    while ($ncount < $data.ncomponents) loop genrandom
      evaluate ($ncount = $ncount + 1)
      if ($Toppar.fix_origin_$ncount eq true) then
        evaluate ($random_$ncount = 0.0)
      else
        evaluate ($random_$ncount = random())
      end if
    end loop genrandom

    ! Randomly pick a molecule and place it
    ! on the pre-defined position - iterate
    evaluate ($sum_random = 999)
    evaluate ($molcounter = 1)

    while ($sum_random > 0) loop placemol
        display PLACING MOLECULE $molcounter
        evaluate ($maximum = 0)
        evaluate ($maxid = 0)
        evaluate ($ncount = 0)

        while ($ncount < $data.ncomponents) loop selectmol
          evaluate ($ncount = $ncount + 1)
          if ($random_$ncount > $maximum) then
            evaluate ($maximum = $random_$ncount)
            evaluate ($maxid = $ncount)
          end if
        end loop selectmol

        display OI OI $ncount $maxid
        if ($Toppar.fix_origin_$maxid eq false) then
          coor trans sele=(segid $Toppar.prot_segid_$maxid or segid $watersegname_$ncount) vector=($x_$molcounter, $y_$molcounter, $z_$molcounter) end

          ! Reset random_ncount to 0 to avoid re-selecting
          evaluate ($random_$maxid = 0)

          ! Increment molcounter to update new
          evaluate ($molcounter = $molcounter + 1)

          ! Update sum_random
          evaluate ($ncount = 0)
          evaluate ($sum_random = 0)

          while ($ncount < $data.ncomponents) loop resetsumrandom
            evaluate ($ncount = $ncount + 1)
            evaluate( $sum_random = $sum_random + $random_$ncount)
          end loop resetsumrandom
        end if
    end loop placemol
  end if

  do (x = refx) (resn ANI or resn DAN or resn XAN)
  do (y = refy) (resn ANI or resn DAN or resn XAN)
  do (z = refz) (resn ANI or resn DAN or resn XAN)
